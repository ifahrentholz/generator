{"version":3,"sources":["../../src/services/creator.js"],"names":["fs","createFolder","folder","ensureFileSync","message","createFile","file","cName","target","_filename","_filepath","createFileSync","setFileContent","getFileContent","filepath","_fileExtension","split","pop","_type","filter","n","length","console","log","generate","structure","Object","keys","forEach","key"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;IAAYA,E;;AACZ;;;;AACA;;;;;;;;AAGA;;;;;;;AAOA,IAAIC,eAAe,SAAfA,YAAe,CAACC,MAAD,EAAY;AAC7BF,KAAGG,cAAH,CAAqBD,MAArB;AACA,mBAAOE,OAAP,qBAAiCF,MAAjC;AACD,CAHD;;AAOA;;;;;;;AAOA,IAAIG,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAyB;AACxC,MAAIC,YAAY,6BAAYH,IAAZ,EAAkBC,KAAlB,EAAyB,SAAzB,CAAhB;AACA,MAAIG,YAAYF,SAASC,SAAzB;AACAT,KAAGW,cAAH,CAAkBD,SAAlB;AACA,mBAAON,OAAP,mBAA+BM,SAA/B;AACAE,iBAAeH,SAAf,EAA0BD,MAA1B;AACD,CAND;;AASA;;;;;;AAMA,IAAIK,iBAAiB,SAAjBA,cAAiB,CAACP,IAAD,EAAU,CAC9B,CADD;;AAIA;;;;;AAKA,IAAIM,iBAAiB,SAAjBA,cAAiB,CAACN,IAAD,EAAOQ,QAAP,EAAoB;AACvC,MAAIC,iBAAiBT,KAAKU,KAAL,CAAW,GAAX,EAAgBC,GAAhB,EAArB;AACA,MAAIC,QAAQJ,SAASE,KAAT,CAAe,GAAf,EAAoBG,MAApB,CAA2B,UAACC,CAAD,EAAO;AAC5C,WAAOA,EAAEC,MAAF,GAAW,CAAlB;AACD,GAFW,EAETJ,GAFS,EAAZ;AAGAK,UAAQC,GAAR,CAAY,YAAZ,EAA0BR,cAA1B;AACAO,UAAQC,GAAR,CAAY,OAAZ,EAAqBL,KAArB;AACD,CAPD;;AAWA;;;;;;;;AAQA,IAAIM,WAAW,SAAXA,QAAW,CAACjB,KAAD,EAAQkB,SAAR,EAAmBjB,MAAnB,EAA8B;AAC3CkB,SAAOC,IAAP,CAAYF,SAAZ,EAAuBG,OAAvB,CAA+B,UAACC,GAAD,EAAS;AACtC,QAAI,wBAASJ,UAAUI,GAAV,CAAT,CAAJ,EAA8B;AAC5B,UAAI3B,SAASM,SAASqB,GAAtB;AACA5B,mBAAaC,MAAb;AACAsB,eAASjB,KAAT,EAAgBkB,UAAUI,GAAV,CAAhB,EAAgC3B,SAAS,GAAzC;AACD,KAJD,MAIO,IAAI,uBAAQuB,UAAUI,GAAV,CAAR,CAAJ,EAA6B;AAAA;AAAA;AAAA;;AAAA;AAClC,6BAAiBJ,UAAUI,GAAV,CAAjB,8HAAiC;AAAA,cAAxBvB,IAAwB;;AAC/BD,qBAAWC,IAAX,EAAiBC,KAAjB,EAAwBC,MAAxB;AACD;AAHiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAInC;AAEF,GAXD;AAYD,CAbD;;AAgBA;;;;;;;;;;;;kBAWe,UAACD,KAAD,EAAQkB,SAAR,EAAqC;AAAA,MAAlBjB,MAAkB,uEAAT,IAAS;;AAClD,MAAI,CAACA,MAAL,EAAa;AACXA,aAASD,QAAQ,GAAjB;AACD;AACDiB,WAASjB,KAAT,EAAgBkB,SAAhB,EAA2BjB,MAA3B;AACD,C","file":"creator.js","sourcesContent":["import isObject from \"../helper/isObject\";\nimport logger from './logger';\nimport * as fs from \"fs-extra\";\nimport isArray from \"../helper/isArray\";\nimport setFileName from \"../helper/replaceString\";\n\n\n/**\n * This method should be used to create an folder.\n * It implicitly adds a .keep file so you can check in\n * the folder structure to your VCS.\n *\n * @param {String} folder\n */\nlet createFolder = (folder) => {\n  fs.ensureFileSync(`${folder}/.keep`);\n  logger.message(`created folder ${folder}`);\n};\n\n\n\n/**\n * Creates a file.\n *\n * @param {String} file\n * @param {String} cName\n * @param {String} target\n */\nlet createFile = (file, cName, target) => {\n  let _filename = setFileName(file, cName, \"%cName%\");\n  let _filepath = target + _filename;\n  fs.createFileSync(_filepath);\n  logger.message(`created file ${_filepath}`);\n  setFileContent(_filename, target);\n};\n\n\n/**\n * Get file content based on path and extension\n * of a given file.\n *\n * @param {String} file\n */\nlet getFileContent = (file) => {\n};\n\n\n/**\n * Fill a given file with content.\n *\n * @param {String} file\n */\nlet setFileContent = (file, filepath) => {\n  let _fileExtension = file.split(\".\").pop();\n  let _type = filepath.split(\"/\").filter((n) => {\n    return n.length > 0;\n  }).pop();\n  console.log(\"extension:\", _fileExtension);\n  console.log(\"type:\", _type);\n};\n\n\n\n/**\n * The generate function starts parsing through the\n * folder structure and is creating files & folders.\n *\n * @param {String} cName\n * @param {Object} structure\n * @param {String} target\n */\nlet generate = (cName, structure, target) => {\n  Object.keys(structure).forEach((key) => {\n    if (isObject(structure[key])) {\n      let folder = target + key;\n      createFolder(folder);\n      generate(cName, structure[key], folder + \"/\");\n    } else if (isArray(structure[key])) {\n      for (let file of structure[key]) {\n        createFile(file, cName, target);\n      }\n    }\n\n  });\n};\n\n\n/**\n *\n * Start the generate function. The target parameter\n * is optional and will be auto set while traversing through\n * the structure object.\n *\n * @param {String} cName\n * @param {Object} structure\n * @param {String|null} target\n * @returns {void}\n */\nexport default (cName, structure, target = null) => {\n  if (!target) {\n    target = cName + \"/\";\n  }\n  generate(cName, structure, target);\n};"]}