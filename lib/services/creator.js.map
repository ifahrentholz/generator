{"version":3,"sources":["../../src/services/creator.js"],"names":["fs","createFolder","folder","ensureFileSync","message","createFile","file","cName","target","_filename","_filepath","createFileSync","setFileContent","getFileContent","filepath","parsed","parse","_base","base","_extension","ext","_name","name","_type","split","filter","n","length","pop","console","log","generate","structure","Object","keys","forEach","key"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,E;;AACZ;;;;AACA;;;;;;;;AAGA;;;;;;;AAOA,IAAMC,eAAe,SAAfA,YAAe,CAACC,MAAD,EAAY;AAC/BF,KAAGG,cAAH,CAAqBD,MAArB;AACA,mBAAOE,OAAP,qBAAiCF,MAAjC;AACD,CAHD;;AAOA;;;;;;;AAOA,IAAMG,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAyB;AAC1C,MAAIC,YAAY,6BAAYH,IAAZ,EAAkBC,KAAlB,EAAyB,SAAzB,CAAhB;AACA,MAAIG,YAAYF,SAASC,SAAzB;AACAT,KAAGW,cAAH,CAAkBD,SAAlB;AACA,mBAAON,OAAP,mBAA+BM,SAA/B;AACAE,iBAAeH,SAAf,EAA0BD,MAA1B;AACD,CAND;;AASA;;;;;;AAMA,IAAMK,iBAAiB,SAAjBA,cAAiB,CAACP,IAAD,EAAU,CAChC,CADD;;AAIA;;;;;;AAMA,IAAMM,iBAAiB,SAAjBA,cAAiB,CAACN,IAAD,EAAOQ,QAAP,EAAoB;AACzC,MAAIC,SAAS,eAAKC,KAAL,CAAWV,IAAX,CAAb;AACA,MAAIW,QAAQF,OAAOG,IAAnB;AACA,MAAIC,aAAaJ,OAAOK,GAAxB;AACA,MAAIC,QAAQN,OAAOO,IAAnB;AACA,MAAIC,QAAQT,SAASU,KAAT,CAAe,GAAf,EAAoBC,MAApB,CAA2B,UAACC,CAAD,EAAO;AAC5C,WAAOA,EAAEC,MAAF,GAAW,CAAlB;AACD,GAFW,EAETC,GAFS,EAAZ;AAGAC,UAAQC,GAAR,CAAY,OAAZ,EAAqBb,KAArB;AACAY,UAAQC,GAAR,CAAY,MAAZ,EAAoBX,UAApB;AACAU,UAAQC,GAAR,CAAY,OAAZ,EAAqBT,KAArB;AACAQ,UAAQC,GAAR,CAAY,OAAZ,EAAqBP,KAArB;AACD,CAZD;;AAgBA;;;;;;;;AAQA,IAAMQ,WAAW,SAAXA,QAAW,CAACxB,KAAD,EAAQyB,SAAR,EAAmBxB,MAAnB,EAA8B;AAC7CyB,SAAOC,IAAP,CAAYF,SAAZ,EAAuBG,OAAvB,CAA+B,UAACC,GAAD,EAAS;AACtC,QAAI,wBAASJ,UAAUI,GAAV,CAAT,CAAJ,EAA8B;AAC5B,UAAIlC,SAASM,SAAS4B,GAAtB;AACAnC,mBAAaC,MAAb;AACA6B,eAASxB,KAAT,EAAgByB,UAAUI,GAAV,CAAhB,EAAgClC,SAAS,GAAzC;AACD,KAJD,MAIO,IAAI,uBAAQ8B,UAAUI,GAAV,CAAR,CAAJ,EAA6B;AAAA;AAAA;AAAA;;AAAA;AAClC,6BAAiBJ,UAAUI,GAAV,CAAjB,8HAAiC;AAAA,cAAxB9B,IAAwB;;AAC/BD,qBAAWC,IAAX,EAAiBC,KAAjB,EAAwBC,MAAxB;AACD;AAHiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAInC;AAEF,GAXD;AAYD,CAbD;;AAgBA;;;;;;;;;;;;kBAWe,UAACD,KAAD,EAAQyB,SAAR,EAAqC;AAAA,MAAlBxB,MAAkB,uEAAT,IAAS;;AAClDqB,UAAQC,GAAR,CAAY,QAAZ,EAAsBvB,KAAtB;AACAsB,UAAQC,GAAR,CAAY,SAAZ,EAAuBE,SAAvB;AACA,MAAI,CAACxB,MAAL,EAAa;AACXA,aAASD,QAAQ,GAAjB;AACD;AACDwB,WAASxB,KAAT,EAAgByB,SAAhB,EAA2BxB,MAA3B;AACD,C","file":"creator.js","sourcesContent":["import path from \"path\";\nimport isObject from \"../helper/isObject\";\nimport logger from './logger';\nimport * as fs from \"fs-extra\";\nimport isArray from \"../helper/isArray\";\nimport setFileName from \"../helper/replaceString\";\n\n\n/**\n * This method should be used to create an folder.\n * It implicitly adds a .keep file so you can check in\n * the folder structure to your VCS.\n *\n * @param {String} folder\n */\nconst createFolder = (folder) => {\n  fs.ensureFileSync(`${folder}/.keep`);\n  logger.message(`created folder ${folder}`);\n};\n\n\n\n/**\n * Creates a file.\n *\n * @param {String} file\n * @param {String} cName\n * @param {String} target\n */\nconst createFile = (file, cName, target) => {\n  let _filename = setFileName(file, cName, \"%cName%\");\n  let _filepath = target + _filename;\n  fs.createFileSync(_filepath);\n  logger.message(`created file ${_filepath}`);\n  setFileContent(_filename, target);\n};\n\n\n/**\n * Get file content based on path and extension\n * of a given file.\n *\n * @param {String} file\n */\nconst getFileContent = (file) => {\n};\n\n\n/**\n * Fill a given file with content.\n *\n * @param {String} file - The file where the content should be set to.\n * @param {String} filepath - The path of the file\n */\nconst setFileContent = (file, filepath) => {\n  let parsed = path.parse(file);\n  let _base = parsed.base;\n  let _extension = parsed.ext;\n  let _name = parsed.name;\n  let _type = filepath.split(\"/\").filter((n) => {\n    return n.length > 0;\n  }).pop();\n  console.log(\"base:\", _base);\n  console.log(\"ext:\", _extension);\n  console.log(\"name:\", _name);\n  console.log(\"type:\", _type);\n};\n\n\n\n/**\n * The generate function starts parsing through the\n * folder structure and is creating files & folders.\n *\n * @param {String} cName\n * @param {Object} structure\n * @param {String} target\n */\nconst generate = (cName, structure, target) => {\n  Object.keys(structure).forEach((key) => {\n    if (isObject(structure[key])) {\n      let folder = target + key;\n      createFolder(folder);\n      generate(cName, structure[key], folder + \"/\");\n    } else if (isArray(structure[key])) {\n      for (let file of structure[key]) {\n        createFile(file, cName, target);\n      }\n    }\n\n  });\n};\n\n\n/**\n *\n * Start the generate function. The target parameter\n * is optional and will be auto set while traversing through\n * the structure object.\n *\n * @param {String} cName\n * @param {Object} structure\n * @param {String|null} target\n * @returns {void}\n */\nexport default (cName, structure, target = null) => {\n  console.log(\"cName:\", cName);\n  console.log(\"struct:\", structure);\n  if (!target) {\n    target = cName + \"/\";\n  }\n  generate(cName, structure, target);\n};"]}